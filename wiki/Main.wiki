#labels Featured,Phase-Requirements,Phase-Deploy,Phase-Design
= Tutorial =
JDataPath will let you query special paths that the OS may support. Supported path types:
  * local data, ideal for storing your application data
  * profile
It may be extended with "video path", "music path" etc.

Only *Windows* have a special implementation (through native code). Other OSes uses a default implementation (uses system properties). Other native implementations are welcome :)

== Install ==
  * Download and unpack the files to your project.
  * Set native lib path system property. 
  * Include the jar in your classpath.

For example, on windows OSes, start java with this argument:
{{{
java -Djava.library.path=lib/native/windows -cp lib/jdatapath.jar ...
}}}

Of course, the target path must contain the native library for your OS.

== Code Usage ==

Using JDataPath is simple. Here is an example:

{{{
DataPath localDataPath = JDataPathSystem.getLocalSystem().getLocalDataPath(wantedDirName);
System.out.println("My local path: " + localDataPath.getPath());
System.out.println("Is path recommended by OS: " + localDataPath.isRecommendedByOs());

DataPath profilePath = JDataPathSystem.getLocalSystem().getUserProfilePath();
System.out.println("Profile path: " + profilePath);
}}}

The returned path object tells if it is recommended by the OS. When *isRecommendedByOs()* is false, it means that the OS does not have any special location for the requested path.